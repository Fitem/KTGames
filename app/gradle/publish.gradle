apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'

/** 差分构建版本自动上传maven-repo(snapshots), 功能测试版本手动上传至maven-repo(feature-snapshots)*/
/*配置maven-publish, 使用artifactoryPublish*/
publishing {
    publications {

        def buildFlavor = "KTGames"
        def buildGroupId = 'Android'
        def buildArtifactId = 'develop'
        def buildVersion = "7.3.0"
        def buildClassifier = ''

        def buildArtifact = "undefinedArtifact"
        def publication = "debug"

        FileTree tree = fileTree(dir: "$buildDir/outputs/apk", include: "**/*.apk", exclude: '**/*AndResGuard*/*.apk')
        tree.each { File file ->
            def fileType = ".apk"
            def picType = ".png"
            // artifactName
            buildArtifact = file.absolutePath
            buildGroupId = "Android"
            buildClassifier = "0/$buildFlavor"
//                buildClassifier = "$buildVersionName.$buildVersionCode.$gitRevision-$buildFlavor-$buildType"

            def outputPath = "$buildDir/outputs/apk"
            def packageName = 'app-debug'
            def picName = "andqr_${packageName}.png"
            def apkUrl = "$rootProject.ext.artifactoryContext/$rootProject.ext.repo/$buildGroupId/$buildArtifactId/$buildVersion/$buildArtifactId-$buildVersion-$buildClassifier$fileType"
            def apkPicUrl = "$rootProject.ext.artifactoryContext/$rootProject.ext.repo/$buildGroupId/$buildArtifactId/$buildVersion/$buildArtifactId-$buildVersion-$buildClassifier$picType"
            def outputPic = "$outputPath/$picName"
            def outputName = "QR.html"
            def outPutHtml = "$outputPath/$outputName"


            exec {
                commandLine "myqr", "$apkUrl", "-n", "$picName", "-d", "$outputPath"
            }

            mavenJava(MavenPublication) {
                File dir = new File("$outputPath")
                if (!dir.exists()) {
                    dir.mkdir()
                }
                FileOutputStream fos = new FileOutputStream(new File(dir, outputName))
                def string = "<!doctype html>\n" +
                        "<html>\n" +
                        "  <head>\n" +
                        "    <meta http-equiv=\"content-type\" content=\"text/html;\">\n" +
                        "    <meta charset=\"utf-8\">\n" +
                        "    <meta name=\"viewport\" content=\"width=device-width; initial-scale=1.0\">\n" +
                        "    <meta name=\"keywords\" content=\"test\" />\n" +
                        "    <meta name=\"description\" content=\"\" />\n" +
                        "    <title>Android测试包下载页</title>\n" +
                        "    <link rel=\"stylesheet\" type=\"text/css\" href=\"style/css/mobile.css\" /></head>\n" +
                        "  <body>\n" +
                        "    <div class=\"doc\">\n" +
                        "      <br/>\n" +
                        "      <br/>\n" +
                        "      <p align = \"center\">\n" +
                        "        <a \n" +
                        "      id=\"ipaPathHref\" href=\"$apkUrl\">$apkUrl</a>\n" +
                        "      </p>\n" +
                        "      <br/>\n" +
                        "      <br/>\n" +
                        "      <p align=\"center\">\n" +
                        "        <a \n" +
                        "      id=\"plistPathHref\" href=\"$apkUrl\">\n" +
                        "    <img alt=\"\" src=\"$apkPicUrl\"\n" +
                        " style=\"height:300px; width:300px\" /></a>\n" +
                        "      </p>\n" +
                        "      <br/>\n" +
                        "      <br/>\n" +
                        "      <br/>\n" +
                        "      <p align=\"center\">请使用Android设备扫码</p>\n" +
                        "      <p align=\"center\">或使用左邻旗下APP广场右上角扫码进行安装</p>\n" +
                        "      <br/></div>\n" +
                        "  </body>\n" +
                        "</html>"
                def sb = new StringBuilder()
                sb.append(string)
                fos.write(sb.toString().getBytes())
                fos.close()
            }

            mavenJava(MavenPublication) {
                groupId buildGroupId
                artifactId buildArtifactId
                version buildVersion

                artifact("$buildArtifact") {
                    classifier buildClassifier
                }
                artifact("$outputPic") {
                    classifier buildClassifier
                }
                artifact("$outPutHtml") {
                    classifier buildClassifier
                }
            }


            println "==========================================================================="
            println "buildGroupId:$buildGroupId\nbuildArtifactId:$buildArtifactId\nbuildVersion:$buildVersion"
            println apkUrl
        }
    }
}

/*配置com.jfrog.artifactory*/
artifactory {
    contextUrl = rootProject.ext.artifactoryContext

    publish {
        repository {
            repoKey = rootProject.ext.repo
            username = rootProject.ext.repoUserName
            password = rootProject.ext.repoPassword
        }

        defaults {
            publishing.publications.each { pub ->
                publications(pub)
            }

            publishArtifacts = true
            publishPom = true
            publishBuildInfo = false
        }

    }

    clientConfig.timeout = 600 // In seconds. The default timeout is 300 seconds.
}
